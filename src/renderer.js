import { TILE_TYPES } from "./tile.js";
import { DECOR_TYPES } from "./decor.js";

export class Renderer {
  constructor(canvasId) {
    this.canvas = document.getElementById(canvasId);
    this.engine = new BABYLON.Engine(this.canvas, true);
    this.scene = new BABYLON.Scene(this.engine);
    this.assetsPath = "./assets/";
    this.propsPath = "./assets/props/";
    this.tileSize = 4;
    this.tileMeshes = [];
    this.decorMeshes = [];

    // –ë–∞–∑–æ–≤–∞—è –∫–∞–º–µ—Ä–∞
    this.camera = new BABYLON.ArcRotateCamera(
      "Camera",
      -Math.PI / 2,
      Math.PI / 3,
      50,
      new BABYLON.Vector3(0, 0, 0),
      this.scene
    );
    this.camera.attachControl(this.canvas, true);
    new BABYLON.HemisphericLight("Light", new BABYLON.Vector3(0, 1, 0), this.scene);
    
    this.engine.runRenderLoop(() => this.scene.render());
  }

  clearScene() {
    this.scene.meshes.slice().forEach((m) => {
      m.dispose();
    });
    this.tileMeshes = [];
    this.decorMeshes = [];
  }

  // –†–µ–Ω–¥–µ—Ä–∏–º –≤–µ—Å—å —É—Ä–æ–≤–µ–Ω—å
  async renderLevel(level) {
    this.clearScene();
    
    this.updateCamera(level.gridSize);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã —É—Ä–æ–≤–Ω—è
    for (const room of level.rooms) {
      const roomData = room.getRoomData();
      
      // –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–π–ª—ã (–ø–æ–ª, —Å—Ç–µ–Ω—ã)
      for (const tile of roomData.tiles) {
        await this.setTile(tile.x, tile.z, tile.type, tile.rotation, tile.side);
      }
      
      // –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
      for (const decor of roomData.decor) {
        await this.setDecor(decor.x, decor.z, decor.type, decor.rotation, decor.asset);
      }
    }

    this.updateGrid(level);
  }

  async setDecor(x, z, decorType, rotation = 0, assetFile) {
    try {
      const mesh = await this.loadProp(assetFile);
      
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç–∞–π–ª–∞
      const posX = x * this.tileSize + this.tileSize / 2;
      const posZ = z * this.tileSize + this.tileSize / 2;
      
      const container = new BABYLON.TransformNode("decorContainer", this.scene);
      container.position = new BABYLON.Vector3(posX, 0, posZ);
      container.rotation.y = rotation;
      
      mesh.parent = container;
      mesh.position = BABYLON.Vector3.Zero();
      
      this.decorMeshes.push(container);
      
      console.log(`üé® Rendered decor ${decorType} at (${x},${z}) with rotation ${rotation}`);
      
    } catch (error) {
      console.error(`Failed to load decor ${decorType}:`, error);
    }
  }

  async loadProp(filename) {
    return new Promise((resolve, reject) => {
      BABYLON.SceneLoader.ImportMesh("", this.propsPath, filename, this.scene, (meshes) => {
        if (meshes.length > 0) {
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–º–µ—â–∞–ª–∏—Å—å –≤ —Ç–∞–π–ª
          meshes[0].scaling = new BABYLON.Vector3(1.5, 1.5, 1.5);
          resolve(meshes[0]);
        }
        else reject("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: " + filename);
      });
    });
  }

  updateCamera(gridSize) {
    const center = (gridSize * this.tileSize) / 2;
    const cameraDistance = Math.max(gridSize * this.tileSize * 0.8, 30);
    
    this.camera.position = new BABYLON.Vector3(
      center,
      cameraDistance * 0.5,
      -cameraDistance
    );
    this.camera.setTarget(new BABYLON.Vector3(center, 0, center));
  }

  updateGrid(level) {
    this.scene.meshes.slice().forEach((m) => {
      if (m.name.startsWith("grid")) m.dispose();
    });

    // –†–∏—Å—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω—è
    this.drawGrid(level.gridSize, level.gridSize, 0, 0);
  }

  drawGrid(width, height, offsetX = 0, offsetZ = 0) {
    const color = new BABYLON.Color3(0.4, 0.4, 0.4);
    const size = this.tileSize;

    for (let x = 0; x <= width; x++) {
      const p1 = new BABYLON.Vector3((offsetX + x) * size, 0, offsetZ * size);
      const p2 = new BABYLON.Vector3((offsetX + x) * size, 0, (offsetZ + height) * size);
      BABYLON.MeshBuilder.CreateLines("gridV" + x, { points: [p1, p2], color }, this.scene);
    }

    for (let z = 0; z <= height; z++) {
      const p1 = new BABYLON.Vector3(offsetX * size, 0, (offsetZ + z) * size);
      const p2 = new BABYLON.Vector3((offsetX + width) * size, 0, (offsetZ + z) * size);
      BABYLON.MeshBuilder.CreateLines("gridH" + z, { points: [p1, p2], color }, this.scene);
    }
  }

  async setTile(x, z, type, rotation = 0, side = null) {
    const tileDef = TILE_TYPES[type];
    if (!tileDef) return;

    try {
      const mesh = await this.loadTile(tileDef.file);
      
      let posX = x * this.tileSize + this.tileSize / 2;
      let posZ = z * this.tileSize + this.tileSize / 2;

      // –°–ú–ï–©–ï–ù–ò–ï –°–¢–ï–ù –í –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò –ö –ö–û–ú–ù–ê–¢–ï
      if ((type === 'wall' || type === 'door') && side) {
        const edgeOffset = this.tileSize * 0.05;
        
        switch (side) {
          case 'north':
            // –°–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–µ–Ω–∞ - —Å–º–µ—â–∞–µ–º –í–í–ï–†–• (–∫ –∫–æ–º–Ω–∞—Ç–µ —Å–Ω–∏–∑—É)
            posZ = z * this.tileSize + this.tileSize - edgeOffset;
            break;
          case 'south':
            // –Æ–∂–Ω–∞—è —Å—Ç–µ–Ω–∞ - —Å–º–µ—â–∞–µ–º –í–ù–ò–ó (–∫ –∫–æ–º–Ω–∞—Ç–µ —Å–≤–µ—Ä—Ö—É)
            posZ = z * this.tileSize + edgeOffset;
            break;
          case 'west':
            // –ó–∞–ø–∞–¥–Ω–∞—è —Å—Ç–µ–Ω–∞ - —Å–º–µ—â–∞–µ–º –í–ü–†–ê–í–û (–∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ª–µ–≤–∞)
            posX = x * this.tileSize + this.tileSize - edgeOffset;
            break;
          case 'east':
            // –í–æ—Å—Ç–æ—á–Ω–∞—è —Å—Ç–µ–Ω–∞ - —Å–º–µ—â–∞–µ–º –í–õ–ï–í–û (–∫ –∫–æ–º–Ω–∞—Ç–µ —Å–ø—Ä–∞–≤–∞)
            posX = x * this.tileSize + edgeOffset;
            break;
        }
      }

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–í–û–†–û–¢ –î–õ–Ø WALL_TO_TUNNEL
      let finalRotation = rotation;
      if (type === 'wall_to_tunnel' && side) {
        switch (side) {
          case 'south':
          case 'east':
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤ –¥–ª—è —é–∂–Ω–æ–π –∏ –≤–æ—Å—Ç–æ—á–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω
            finalRotation = rotation + Math.PI;
            break;
          // north –∏ west –æ—Å—Ç–∞—é—Ç—Å—è —Å –æ–±—ã—á–Ω—ã–º rotation
        }
      }

      const container = new BABYLON.TransformNode("tileContainer", this.scene);
      container.position = new BABYLON.Vector3(posX, 0, posZ);
      container.rotation.y = finalRotation;
      
      mesh.parent = container;
      mesh.position = BABYLON.Vector3.Zero();
      
      this.tileMeshes.push(container);
      
    } catch (error) {
      console.error(`Failed to load ${type}:`, error);
      if (type === 'wall_to_tunnel') {
        await this.setTile(x, z, 'door', rotation, side);
      }
    }
  }

  async loadTile(filename) {
    return new Promise((resolve, reject) => {
      BABYLON.SceneLoader.ImportMesh("", this.assetsPath, filename, this.scene, (meshes) => {
        if (meshes.length > 0) resolve(meshes[0]);
        else reject("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å " + filename);
      });
    });
  }
}