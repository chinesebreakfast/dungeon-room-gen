export class DebugMode {
  constructor(renderer, level) {
    this.renderer = renderer;
    this.level = level;
    this.isEnabled = false;
    this.debugMeshes = [];
    
    this.setupEventListeners();
  }

  enable() {
    this.isEnabled = true;
    console.log("üîß Debug mode ENABLED - click on cells to see coordinates");
    this.addDebugGrid();
  }

  disable() {
    this.isEnabled = false;
    console.log("üîß Debug mode DISABLED");
    this.removeDebugGrid();
  }

  toggle() {
    if (this.isEnabled) {
      this.disable();
    } else {
      this.enable();
    }
  }

  setupEventListeners() {
    // –ö–ª–∏–∫ –ø–æ canvas –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    this.renderer.canvas.addEventListener('click', (event) => {
      if (!this.isEnabled) return;
      
      this.handleCanvasClick(event);
    });

    // –ö–ª–∞–≤–∏—à–∞ D –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥–µ–±–∞–≥–∞
    document.addEventListener('keydown', (event) => {
      if (event.key === 'd' || event.key === 'D') {
        this.toggle();
      }
    });
  }

  handleCanvasClick(event) {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
    const rect = this.renderer.canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const pickResult = this.renderer.scene.pick(x, y);
    
    if (pickResult.hit) {
      const worldPos = pickResult.pickedPoint;
      this.getCellCoordinates(worldPos);
    }
  }

  getCellCoordinates(worldPos) {
    const tileSize = this.renderer.tileSize;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ç–∫–∏
    const gridX = Math.floor(worldPos.x / tileSize);
    const gridZ = Math.floor(worldPos.z / tileSize);
    
    console.log(`üìç Cell coordinates: (${gridX}, ${gridZ})`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–ª–µ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    this.showTileInfo(gridX, gridZ);
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É
    this.highlightCell(gridX, gridZ);
  }

  showTileInfo(x, z) {
    // –ò—â–µ–º —Ç–∞–π–ª –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö —É—Ä–æ–≤–Ω—è
    let tileInfo = null;
    
    for (const room of this.level.rooms) {
      const roomData = room.getRoomData();
      for (const tile of roomData.tiles) {
        if (tile.x === x && tile.z === z) {
          tileInfo = tile;
          break;
        }
      }
      if (tileInfo) break;
    }
    
    if (tileInfo) {
      console.log(`üéØ Tile info:`, {
        type: tileInfo.type,
        rotation: `${tileInfo.rotation}rad (${(tileInfo.rotation * 180/Math.PI).toFixed(1)}¬∞)`,
        side: tileInfo.side,
        room: `(${tileInfo.x}, ${tileInfo.z})`
      });
    } else {
      console.log(`‚ùå No tile at (${x}, ${z}) - empty cell`);
    }
  }

  highlightCell(x, z) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    this.removeDebugGrid();
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ —è—á–µ–π–∫–∏
    const tileSize = this.renderer.tileSize;
    const color = new BABYLON.Color3(1, 0, 0); // –ö—Ä–∞—Å–Ω—ã–π
    
    const points = [
      new BABYLON.Vector3(x * tileSize, 0.1, z * tileSize),
      new BABYLON.Vector3((x + 1) * tileSize, 0.1, z * tileSize),
      new BABYLON.Vector3((x + 1) * tileSize, 0.1, (z + 1) * tileSize),
      new BABYLON.Vector3(x * tileSize, 0.1, (z + 1) * tileSize),
      new BABYLON.Vector3(x * tileSize, 0.1, z * tileSize) // –ó–∞–º—ã–∫–∞–µ–º
    ];
    
    const highlight = BABYLON.MeshBuilder.CreateLines("debugHighlight", {
      points: points,
      colors: [color, color, color, color, color]
    }, this.renderer.scene);
    
    this.debugMeshes.push(highlight);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      const index = this.debugMeshes.indexOf(highlight);
      if (index > -1) {
        highlight.dispose();
        this.debugMeshes.splice(index, 1);
      }
    }, 2000);
  }

  addDebugGrid() {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è –¥–µ–±–∞–≥–∞
    const color = new BABYLON.Color3(0, 1, 0); // –ó–µ–ª–µ–Ω—ã–π
    const alpha = 0.3;
    
    for (let x = 0; x <= this.level.gridSize; x++) {
      for (let z = 0; z <= this.level.gridSize; z++) {
        const points = [
          new BABYLON.Vector3(x * this.renderer.tileSize, 0.05, z * this.renderer.tileSize),
          new BABYLON.Vector3((x + 1) * this.renderer.tileSize, 0.05, z * this.renderer.tileSize),
          new BABYLON.Vector3((x + 1) * this.renderer.tileSize, 0.05, (z + 1) * this.renderer.tileSize),
          new BABYLON.Vector3(x * this.renderer.tileSize, 0.05, (z + 1) * this.renderer.tileSize)
        ];
        
        const cell = BABYLON.MeshBuilder.CreateLines(`debugGrid_${x}_${z}`, {
          points: points
        }, this.renderer.scene);
        
        cell.color = color;
        this.debugMeshes.push(cell);
      }
    }
    
    console.log(`üìê Debug grid added for ${this.level.gridSize}x${this.level.gridSize} level`);
  }

  removeDebugGrid() {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–±–∞–≥-–º–µ—à–∏
    this.debugMeshes.forEach(mesh => {
      mesh.dispose();
    });
    this.debugMeshes = [];
  }
}