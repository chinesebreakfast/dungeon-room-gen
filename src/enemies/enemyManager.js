// enemies/enemyManager.js
import { Enemy } from './enemy.js';
import { ENEMY_TYPES } from './enemyTypes.js';

export class EnemyManager {
  constructor() {
    this.enemies = new Map(); // enemyId -> Enemy
    this.lastUpdateTime = Date.now();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–∞–≥–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
  spawnEnemiesInRoom(room) {
    const roomId = `${room.posX},${room.posZ}`;
    
    const availableTiles = this.getAvailableSpawnTiles(room);
    console.log(`   Found ${availableTiles.length} available tiles`);
    
    let spawnedCount = 0;
    
    for (const tile of availableTiles) {
      if (Math.random() < this.getSpawnProbability()) {
        const enemyType = this.selectRandomEnemyType();
        const enemy = new Enemy(enemyType, tile.x, tile.z, room);
        this.enemies.set(enemy.id, enemy);
        spawnedCount++;
        
      }
    }
    
    console.log(`‚úÖ Spawned ${spawnedCount} enemies in room ${roomId}`);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
  updateAllEnemies() {
    const currentTime = Date.now();
    const deltaTime = (currentTime - this.lastUpdateTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    this.lastUpdateTime = currentTime;

    this.enemies.forEach(enemy => {
      enemy.update(deltaTime);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –¥–ª—è —Å–ø–∞–≤–Ω–∞ (–ø–æ–ª –±–µ–∑ –¥–µ–∫–æ—Ä–∞)
  getAvailableSpawnTiles(room) {
    const roomData = room.getRoomData();
    const availableTiles = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–µ–∫–æ—Ä–∞—Ü–∏—è–º–∏
    const decorPositions = new Set();
    roomData.decor.forEach(decor => {
      decorPositions.add(`${decor.x},${decor.z}`);
    });

    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç–∞–π–ª—ã –ø–æ–ª–∞
    roomData.tiles.forEach(tile => {
      if (tile.type === 'floor') {
        const tileKey = `${tile.x},${tile.z}`;
        if (!decorPositions.has(tileKey)) {
          availableTiles.push({ x: tile.x, z: tile.z });
        }
      }
    });

    return availableTiles;
  }

  // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–∞ –Ω–∞ —Ç–∞–π–ª–µ
  getSpawnProbability() {
    return 0.4; // 40% —à–∞–Ω—Å
  }

  // –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤—Ä–∞–≥–∞
  selectRandomEnemyType() {
    const types = Object.keys(ENEMY_TYPES);
    return types[Math.floor(Math.random() * types.length)];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getAllEnemiesForRender() {
    const enemiesData = [];
    this.enemies.forEach(enemy => {
      enemiesData.push(enemy.getRenderData());
    });
    return enemiesData;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–∞–≥–∞ –ø–æ ID
  getEnemyById(id) {
    return this.enemies.get(id);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ä–∞–≥–æ–≤
  getEnemyCount() {
    return this.enemies.size;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
  clearAllEnemies() {
    this.enemies.clear();
    console.log('üßπ Cleared all enemies');
  }
}