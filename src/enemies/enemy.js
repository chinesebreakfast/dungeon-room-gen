// enemies/enemy.js
import { ENEMY_TYPES } from './enemyTypes.js';

export class Enemy {
  constructor(type, x, z, room, navigation) {
    this.id = `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.type = type;
    this.config = ENEMY_TYPES[type];
    this.x = x;
    this.z = z;
    this.room = room;
    this.navigation = navigation;
    
    this.targetCell = null;
    this.availableMoves = [];
    
    // —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    this.state = 'PATROL'; // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å PATROL
    this.currentAnimation = null;
    this.animationGroups = null;

    // —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.stateTimer = 0;
    
    // –°—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–ª–µ—Ç–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    this.chooseNextCell();
  }

  update(deltaTime){
    // –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º - –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PATROL
  }

  setState(newState){
    if(this.state === newState) return;

    this.state = newState;
    this.stateTimer = 0;

    this.playStateAnimation(newState);
  }

  chooseNextCell(){
    this.availableMoves = this.navigation.getWalkableNeighbors(this.x, this.z);

    if(this.availableMoves.length > 0){
      const randomIndex = Math.floor(Math.random() * this.availableMoves.length);
      this.targetCell = this.availableMoves[randomIndex];
      console.log(`üéØ ${this.type} at (${this.x},${this.z}) ‚Üí Target: (${this.targetCell.x},${this.targetCell.z})`);
    } else {
      this.targetCell = null;
      console.log(`‚ùå ${this.type} at (${this.x},${this.z}) - No available moves`);
    }
  }

  playStateAnimation(state){
    const animationName = this.config.animations[state];
    if(animationName && this.animationGroups){
      this.stopAllAnimations();

      const animationGroup = this.animationGroups.find(
        group => group.name === animationName);
      if(animationGroup){
        animationGroup.start(true);
        this.currentAnimation = animationGroup;
      } else {
        console.warn(`‚ö†Ô∏è Animation not found: ${animationName} for ${this.type}`);
      }
    }
  }

  stopAllAnimations(){
    if(this.animationGroups){
      this.animationGroups.forEach(group => group.stop());
      this.currentAnimation = null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞)
  setAnimationGroups(animationGroups){
    this.animationGroups = animationGroups;
    this.playStateAnimation(this.state);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getRenderData() {
    return {
      id: this.id,
      type: this.type,
      x: this.x,
      z: this.z,
      config: this.config,
      state: this.state
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  getPosition() {
    return { x: this.x, z: this.z };
  }

  getAIDebugInfo() {
    return {
      state: this.state,
      currentPos: {x: this.x, z: this.z},
      targetCell: this.targetCell,
      availableMoves: this.availableMoves
    };
  }
}