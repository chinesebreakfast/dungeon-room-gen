// enemies/enemyRenderer.js
export class EnemyRenderer {
  constructor(scene, assetsPath) {
    this.scene = scene;
    this.assetsPath = assetsPath;
    this.enemyMeshes = new Map(); // enemyId -> { mesh, animationGroups }
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
  async renderEnemies(enemiesData, enemyManager) {
    
    for (const enemyData of enemiesData) {
      await this.renderEnemy(enemyData, enemyManager);
    }
    
    console.log(`‚úÖ Finished rendering enemies`);
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
  async renderEnemy(enemyData, enemyManager) {
    try {
      const { id, type, x, z, config } = enemyData;
      
      const result = await this.loadEnemyModel(config.file, id);
      if (!result) {
        console.error(`‚ùå Failed to load model for ${type}`);
        return;
      }

      const { mesh, animationGroups } = result;

      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const tileSize = 4;
      mesh.position = new BABYLON.Vector3(
        x * tileSize + tileSize / 2,
        0,
        z * tileSize + tileSize / 2
      );
      
      // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      mesh.scaling = new BABYLON.Vector3(config.scale, config.scale, config.scale);
      mesh.name = `enemy_${id}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—à –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
      this.enemyMeshes.set(id, { mesh, animationGroups });
      
      // –ü–µ—Ä–µ–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞–≥—É
      const enemy = enemyManager.getEnemyById(id);
      if (enemy) {
        enemy.setAnimationGroups(animationGroups);
      }
      
    } catch (error) {
      console.error(`‚ùå Error rendering enemy:`, error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≤—Ä–∞–≥–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
  async loadEnemyModel(filename, enemyId) {
    return new Promise((resolve, reject) => {
      BABYLON.SceneLoader.ImportMesh("", this.assetsPath, filename, this.scene, 
        (meshes, particleSystems, skeletons, animationGroups) => {
          if (meshes.length > 0) {
            const mesh = meshes[0];    
            resolve({ 
              mesh, 
              animationGroups: animationGroups || [] 
            });
          } else {
            reject(new Error(`No meshes in file: ${filename}`));
          }
        },
        null,
        (scene, message) => {
          reject(new Error(`Load error: ${message}`));
        }
      );
    });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
  logAnimations(animationGroups, filename) {
    console.log(`üé≠ Animations for ${filename}:`);
    
    if (animationGroups && animationGroups.length > 0) {
      animationGroups.forEach((group, index) => {
        console.log(`   ${index}. "${group.name}"`);
      });
    } else {
      console.log(`   No animation groups found`);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –º–µ—à–µ–π –≤—Ä–∞–≥–æ–≤
  clearAllMeshes() {
    this.enemyMeshes.forEach(({ mesh, animationGroups }) => {
      mesh.dispose();
      // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ dispose —Å—Ü–µ–Ω—ã
    });
    this.enemyMeshes.clear();
    console.log('üßπ Cleared all enemy meshes');
  }
}