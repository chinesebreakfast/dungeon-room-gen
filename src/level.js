import { Room } from "./room.js";
import { BSPGenerator } from "./BSPGenerator.js";

export class Level {
  constructor(levelIndex, gridSize) {
    this.levelIndex = levelIndex;
    this.gridSize = gridSize;
    this.rooms = [];
  }

  generateRooms() {
    console.log(`üèóÔ∏è Generating rooms for level ${this.levelIndex}...`);
    
    const generator = new BSPGenerator(this.levelIndex, this.gridSize);
    const generatedRooms = generator.generate();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    generatedRooms.forEach(room => {
      this.addRoom(room);
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª–æ–º, —Å—Ç–µ–Ω–∞–º–∏ –∏ –¥–µ–∫–æ—Ä–æ–º
    this.generateRoomContents();
    
    console.log(`‚úÖ Level generation complete: ${this.rooms.length} rooms`);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–º–Ω–∞—Ç
  generateRoomContents() {
    this.rooms.forEach(room => {
      room.fillFloor();
      room.generateWalls();
      room.generateDecor();
    });
  }

  addRoom(room) {
    this.rooms.push(room);
    return this;
  }

  mergeRooms(...subrooms) {
  if (subrooms.length === 0) {
    return null;
  }

  const bounds = this.calculateMergedBounds(subrooms);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
  const mergedRoom = new Room(
    bounds.minX, 
    bounds.minZ, 
    bounds.maxX - bounds.minX + 1, 
    bounds.maxZ - bounds.minZ + 1,
    { isMerged: true }
  );

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–∫–æ–º–Ω–∞—Ç
  this.mergeFloors(mergedRoom, subrooms);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞–π–ª—ã –∏–∑ –ø–æ–¥–∫–æ–º–Ω–∞—Ç
  this.preserveSpecialTiles(mergedRoom, subrooms);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–µ–Ω—ã –≤–æ–∫—Ä—É–≥ –ö–ê–ñ–î–û–ì–û —Ç–∞–π–ª–∞ –ø–æ–ª–∞
  mergedRoom.generateWalls();

  // –î–û–ë–ê–í–õ–Ø–ï–ú: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–µ–Ω—ã –≤ —É–≥–ª–∞—Ö
  this.addMissingCornerWalls(mergedRoom, subrooms);

  return mergedRoom;
}

// –ù–û–í–´–ô –ú–ï–¢–û–î: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–µ–Ω—ã –≤ —É–≥–ª–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç
addMissingCornerWalls(mergedRoom, subrooms) {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  const floorPositions = new Set();
  for (const tile of mergedRoom.tiles.values()) {
    if (tile.type === 'floor') {
      floorPositions.add(`${tile.x},${tile.z}`);
    }
  }

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–≥–ª—ã (–≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã)
  for (let x = mergedRoom.posX - 1; x <= mergedRoom.posX + mergedRoom.width; x++) {
    for (let z = mergedRoom.posZ - 1; z <= mergedRoom.posZ + mergedRoom.height; z++) {
      const currentKey = `${x},${z}`;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª–æ–º
      if (floorPositions.has(currentKey)) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –æ—Ç —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
      const hasLeftFloor = floorPositions.has(`${x-1},${z}`);
      const hasRightFloor = floorPositions.has(`${x+1},${z}`);
      const hasTopFloor = floorPositions.has(`${x},${z-1}`);
      const hasBottomFloor = floorPositions.has(`${x},${z+1}`);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—ã –∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ - —ç—Ç–æ —É–≥–ª–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
      const isHorizontalEdge = hasLeftFloor || hasRightFloor;
      const isVerticalEdge = hasTopFloor || hasBottomFloor;
      
      if (isHorizontalEdge && isVerticalEdge) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≥–¥–µ –µ—Å—Ç—å –ø–æ–ª—ã
        if (hasLeftFloor) this.placeWallIfMissing(mergedRoom, x, z, 'east');
        if (hasRightFloor) this.placeWallIfMissing(mergedRoom, x, z, 'west');
        if (hasTopFloor) this.placeWallIfMissing(mergedRoom, x, z, 'south');
        if (hasBottomFloor) this.placeWallIfMissing(mergedRoom, x, z, 'north');
      }
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: —Å—Ç–∞–≤–∏–º —Å—Ç–µ–Ω—É, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç —Å —Ç–∞–∫–∏–º side
placeWallIfMissing(mergedRoom, x, z, side) {
  const key = `${x},${z}`;
  const existingTile = mergedRoom.tiles.get(key);
  
  // –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞–π–ª—ã
  if (existingTile && (existingTile.type === 'door' || existingTile.type === 'wall_to_tunnel')) {
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–µ–Ω–∞ —Å —Ç–∞–∫–∏–º side
  if (existingTile && existingTile.type === 'wall' && existingTile.side === side) {
    return; // –°—Ç–µ–Ω–∞ —Å —Ç–∞–∫–∏–º side —É–∂–µ –µ—Å—Ç—å
  }
  
  // –°—Ç–∞–≤–∏–º –Ω–æ–≤—É—é —Å—Ç–µ–Ω—É
  mergedRoom.tiles.set(key, {
    type: 'wall',
    x: x,
    z: z,
    rotation: mergedRoom.getWallRotation(side),
    side: side
  });
}

  mergeFloors(mergedRoom, subrooms) {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞–π–ª—ã –ø–æ–ª–∞
    for (const room of subrooms) {
      const roomData = room.getRoomData();
      for (const tile of roomData.tiles) {
        if (tile.type === 'floor') {
          const key = `${tile.x},${tile.z}`;
          mergedRoom.tiles.set(key, {
            type: 'floor',
            x: tile.x,
            z: tile.z,
            rotation: 0
          });
        }
      }
    }
  }

  preserveSpecialTiles(mergedRoom, subrooms) {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞–π–ª—ã
    for (const room of subrooms) {
      const roomData = room.getRoomData();
      for (const tile of roomData.tiles) {
        if (tile.type === 'door' || tile.type === 'wall_to_tunnel') {
          const key = `${tile.x},${tile.z}`;
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞–π–ª
          mergedRoom.tiles.set(key, {
            type: tile.type,
            x: tile.x,
            z: tile.z,
            rotation: tile.rotation,
            side: tile.side
          });
        }
      }
    }
  }

  calculateMergedBounds(rooms) {
    let minX = Infinity, maxX = -Infinity, minZ = Infinity, maxZ = -Infinity;
    
    for (const room of rooms) {
      minX = Math.min(minX, room.posX);
      maxX = Math.max(maxX, room.posX + room.width - 1);
      minZ = Math.min(minZ, room.posZ);
      maxZ = Math.max(maxZ, room.posZ + room.height - 1);
    }
    
    return { minX, maxX, minZ, maxZ };
  }

  getLevelData() {
    return {
      level: this.levelIndex,
      gridSize: this.gridSize,
      rooms: this.rooms,
      bounds: this.calculateLevelBounds()
    };
  }

  calculateLevelBounds() {
    if (this.rooms.length === 0) {
      return { minX: 0, maxX: this.gridSize - 1, minZ: 0, maxZ: this.gridSize - 1 };
    }
    return this.calculateMergedBounds(this.rooms);
  }
}